// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library hushh.hcf;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class VibeMode {
  final int value;
  const VibeMode._(this.value);

  factory VibeMode.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum VibeMode');
    }
    return result;
  }

  static VibeMode? _createOrNull(int? value) => 
      value == null ? null : VibeMode.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  static const VibeMode ProductText = VibeMode._(0);
  static const VibeMode ProductImage = VibeMode._(1);
  static const VibeMode Text = VibeMode._(2);
  static const VibeMode Image = VibeMode._(3);
  static const VibeMode Category = VibeMode._(4);
  static const Map<int, VibeMode> values = {
    0: ProductText,
    1: ProductImage,
    2: Text,
    3: Image,
    4: Category};

  static const fb.Reader<VibeMode> reader = _VibeModeReader();

  @override
  String toString() {
    return 'VibeMode{value: $value}';
  }
}

class _VibeModeReader extends fb.Reader<VibeMode> {
  const _VibeModeReader();

  @override
  int get size => 1;

  @override
  VibeMode read(fb.BufferContext bc, int offset) =>
      VibeMode.fromValue(const fb.Int8Reader().read(bc, offset));
}

class Brand {
  Brand._(this._bc, this._bcOffset);
  factory Brand(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Brand> reader = _BrandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get url => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'Brand{id: ${id}, description: ${description}, name: ${name}, url: ${url}}';
  }

  BrandT unpack() => BrandT(
      id: id,
      description: description,
      name: name,
      url: url);

  static int pack(fb.Builder fbBuilder, BrandT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class BrandT implements fb.Packable {
  String? id;
  String? description;
  String? name;
  String? url;

  BrandT({
      this.id,
      this.description,
      this.name,
      this.url});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? idOffset = id == null ? null
        : fbBuilder.writeString(id!);
    final int? descriptionOffset = description == null ? null
        : fbBuilder.writeString(description!);
    final int? nameOffset = name == null ? null
        : fbBuilder.writeString(name!);
    final int? urlOffset = url == null ? null
        : fbBuilder.writeString(url!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, descriptionOffset);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addOffset(3, urlOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'BrandT{id: ${id}, description: ${description}, name: ${name}, url: ${url}}';
  }
}

class _BrandReader extends fb.TableReader<Brand> {
  const _BrandReader();

  @override
  Brand createObject(fb.BufferContext bc, int offset) => 
    Brand._(bc, offset);
}

class BrandBuilder {
  BrandBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addUrlOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BrandObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _description;
  final String? _name;
  final String? _url;

  BrandObjectBuilder({
    String? id,
    String? description,
    String? name,
    String? url,
  })
      : _id = id,
        _description = description,
        _name = name,
        _url = url;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? urlOffset = _url == null ? null
        : fbBuilder.writeString(_url!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, descriptionOffset);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addOffset(3, urlOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Product {
  Product._(this._bc, this._bcOffset);
  factory Product(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Product> reader = _ProductReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get url => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  Brand? get brand => Brand.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'Product{id: ${id}, description: ${description}, url: ${url}, brand: ${brand}}';
  }

  ProductT unpack() => ProductT(
      id: id,
      description: description,
      url: url,
      brand: brand?.unpack());

  static int pack(fb.Builder fbBuilder, ProductT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ProductT implements fb.Packable {
  String? id;
  String? description;
  String? url;
  BrandT? brand;

  ProductT({
      this.id,
      this.description,
      this.url,
      this.brand});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? idOffset = id == null ? null
        : fbBuilder.writeString(id!);
    final int? descriptionOffset = description == null ? null
        : fbBuilder.writeString(description!);
    final int? urlOffset = url == null ? null
        : fbBuilder.writeString(url!);
    final int? brandOffset = brand?.pack(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, descriptionOffset);
    fbBuilder.addOffset(2, urlOffset);
    fbBuilder.addOffset(3, brandOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ProductT{id: ${id}, description: ${description}, url: ${url}, brand: ${brand}}';
  }
}

class _ProductReader extends fb.TableReader<Product> {
  const _ProductReader();

  @override
  Product createObject(fb.BufferContext bc, int offset) => 
    Product._(bc, offset);
}

class ProductBuilder {
  ProductBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addUrlOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addBrandOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ProductObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _description;
  final String? _url;
  final BrandObjectBuilder? _brand;

  ProductObjectBuilder({
    String? id,
    String? description,
    String? url,
    BrandObjectBuilder? brand,
  })
      : _id = id,
        _description = description,
        _url = url,
        _brand = brand;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? urlOffset = _url == null ? null
        : fbBuilder.writeString(_url!);
    final int? brandOffset = _brand?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, descriptionOffset);
    fbBuilder.addOffset(2, urlOffset);
    fbBuilder.addOffset(3, brandOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Vibe {
  Vibe._(this._bc, this._bcOffset);
  factory Vibe(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Vibe> reader = _VibeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<int>? get productIdx => const fb.ListReader<int>(fb.Int32Reader()).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Vibe{id: ${id}, description: ${description}, productIdx: ${productIdx}}';
  }

  VibeT unpack() => VibeT(
      id: id,
      description: description,
      productIdx: const fb.ListReader<int>(fb.Int32Reader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 8));

  static int pack(fb.Builder fbBuilder, VibeT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class VibeT implements fb.Packable {
  String? id;
  String? description;
  List<int>? productIdx;

  VibeT({
      this.id,
      this.description,
      this.productIdx});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? idOffset = id == null ? null
        : fbBuilder.writeString(id!);
    final int? descriptionOffset = description == null ? null
        : fbBuilder.writeString(description!);
    final int? productIdxOffset = productIdx == null ? null
        : fbBuilder.writeListInt32(productIdx!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, descriptionOffset);
    fbBuilder.addOffset(2, productIdxOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'VibeT{id: ${id}, description: ${description}, productIdx: ${productIdx}}';
  }
}

class _VibeReader extends fb.TableReader<Vibe> {
  const _VibeReader();

  @override
  Vibe createObject(fb.BufferContext bc, int offset) => 
    Vibe._(bc, offset);
}

class VibeBuilder {
  VibeBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addProductIdxOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VibeObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _description;
  final List<int>? _productIdx;

  VibeObjectBuilder({
    String? id,
    String? description,
    List<int>? productIdx,
  })
      : _id = id,
        _description = description,
        _productIdx = productIdx;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? productIdxOffset = _productIdx == null ? null
        : fbBuilder.writeListInt32(_productIdx!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, descriptionOffset);
    fbBuilder.addOffset(2, productIdxOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Category {
  Category._(this._bc, this._bcOffset);
  factory Category(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Category> reader = _CategoryReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get url => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  List<int>? get productIdx => const fb.ListReader<int>(fb.Int32Reader()).vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'Category{id: ${id}, description: ${description}, url: ${url}, productIdx: ${productIdx}}';
  }

  CategoryT unpack() => CategoryT(
      id: id,
      description: description,
      url: url,
      productIdx: const fb.ListReader<int>(fb.Int32Reader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 10));

  static int pack(fb.Builder fbBuilder, CategoryT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class CategoryT implements fb.Packable {
  String? id;
  String? description;
  String? url;
  List<int>? productIdx;

  CategoryT({
      this.id,
      this.description,
      this.url,
      this.productIdx});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? idOffset = id == null ? null
        : fbBuilder.writeString(id!);
    final int? descriptionOffset = description == null ? null
        : fbBuilder.writeString(description!);
    final int? urlOffset = url == null ? null
        : fbBuilder.writeString(url!);
    final int? productIdxOffset = productIdx == null ? null
        : fbBuilder.writeListInt32(productIdx!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, descriptionOffset);
    fbBuilder.addOffset(2, urlOffset);
    fbBuilder.addOffset(3, productIdxOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'CategoryT{id: ${id}, description: ${description}, url: ${url}, productIdx: ${productIdx}}';
  }
}

class _CategoryReader extends fb.TableReader<Category> {
  const _CategoryReader();

  @override
  Category createObject(fb.BufferContext bc, int offset) => 
    Category._(bc, offset);
}

class CategoryBuilder {
  CategoryBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addUrlOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addProductIdxOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CategoryObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _description;
  final String? _url;
  final List<int>? _productIdx;

  CategoryObjectBuilder({
    String? id,
    String? description,
    String? url,
    List<int>? productIdx,
  })
      : _id = id,
        _description = description,
        _url = url,
        _productIdx = productIdx;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? urlOffset = _url == null ? null
        : fbBuilder.writeString(_url!);
    final int? productIdxOffset = _productIdx == null ? null
        : fbBuilder.writeListInt32(_productIdx!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, descriptionOffset);
    fbBuilder.addOffset(2, urlOffset);
    fbBuilder.addOffset(3, productIdxOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class FlatEmbeddingBatch {
  FlatEmbeddingBatch._(this._bc, this._bcOffset);
  factory FlatEmbeddingBatch(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FlatEmbeddingBatch> reader = _FlatEmbeddingBatchReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<int>? get shape => const fb.ListReader<int>(fb.Int32Reader()).vTableGetNullable(_bc, _bcOffset, 6);
  VibeMode get vibeMode => VibeMode.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 8, 0));
  List<double>? get flatTensor => const fb.ListReader<double>(fb.Float32Reader()).vTableGetNullable(_bc, _bcOffset, 10);
  List<int>? get productIdx => const fb.ListReader<int>(fb.Int32Reader()).vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'FlatEmbeddingBatch{id: ${id}, shape: ${shape}, vibeMode: ${vibeMode}, flatTensor: ${flatTensor}, productIdx: ${productIdx}}';
  }

  FlatEmbeddingBatchT unpack() => FlatEmbeddingBatchT(
      id: id,
      shape: const fb.ListReader<int>(fb.Int32Reader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 6),
      vibeMode: vibeMode,
      flatTensor: const fb.ListReader<double>(fb.Float32Reader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 10),
      productIdx: const fb.ListReader<int>(fb.Int32Reader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 12));

  static int pack(fb.Builder fbBuilder, FlatEmbeddingBatchT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class FlatEmbeddingBatchT implements fb.Packable {
  String? id;
  List<int>? shape;
  VibeMode vibeMode;
  List<double>? flatTensor;
  List<int>? productIdx;

  FlatEmbeddingBatchT({
      this.id,
      this.shape,
      this.vibeMode = VibeMode.ProductText,
      this.flatTensor,
      this.productIdx});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? idOffset = id == null ? null
        : fbBuilder.writeString(id!);
    final int? shapeOffset = shape == null ? null
        : fbBuilder.writeListInt32(shape!);
    final int? flatTensorOffset = flatTensor == null ? null
        : fbBuilder.writeListFloat32(flatTensor!);
    final int? productIdxOffset = productIdx == null ? null
        : fbBuilder.writeListInt32(productIdx!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, shapeOffset);
    fbBuilder.addInt8(2, vibeMode.value);
    fbBuilder.addOffset(3, flatTensorOffset);
    fbBuilder.addOffset(4, productIdxOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'FlatEmbeddingBatchT{id: ${id}, shape: ${shape}, vibeMode: ${vibeMode}, flatTensor: ${flatTensor}, productIdx: ${productIdx}}';
  }
}

class _FlatEmbeddingBatchReader extends fb.TableReader<FlatEmbeddingBatch> {
  const _FlatEmbeddingBatchReader();

  @override
  FlatEmbeddingBatch createObject(fb.BufferContext bc, int offset) => 
    FlatEmbeddingBatch._(bc, offset);
}

class FlatEmbeddingBatchBuilder {
  FlatEmbeddingBatchBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addShapeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addVibeMode(VibeMode? vibeMode) {
    fbBuilder.addInt8(2, vibeMode?.value);
    return fbBuilder.offset;
  }
  int addFlatTensorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addProductIdxOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FlatEmbeddingBatchObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final List<int>? _shape;
  final VibeMode? _vibeMode;
  final List<double>? _flatTensor;
  final List<int>? _productIdx;

  FlatEmbeddingBatchObjectBuilder({
    String? id,
    List<int>? shape,
    VibeMode? vibeMode,
    List<double>? flatTensor,
    List<int>? productIdx,
  })
      : _id = id,
        _shape = shape,
        _vibeMode = vibeMode,
        _flatTensor = flatTensor,
        _productIdx = productIdx;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? shapeOffset = _shape == null ? null
        : fbBuilder.writeListInt32(_shape!);
    final int? flatTensorOffset = _flatTensor == null ? null
        : fbBuilder.writeListFloat32(_flatTensor!);
    final int? productIdxOffset = _productIdx == null ? null
        : fbBuilder.writeListInt32(_productIdx!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, shapeOffset);
    fbBuilder.addInt8(2, _vibeMode?.value);
    fbBuilder.addOffset(3, flatTensorOffset);
    fbBuilder.addOffset(4, productIdxOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ProductVibes {
  ProductVibes._(this._bc, this._bcOffset);
  factory ProductVibes(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ProductVibes> reader = _ProductVibesReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<Product>? get products => const fb.ListReader<Product>(Product.reader).vTableGetNullable(_bc, _bcOffset, 6);
  List<Brand>? get brands => const fb.ListReader<Brand>(Brand.reader).vTableGetNullable(_bc, _bcOffset, 8);
  List<Category>? get categories => const fb.ListReader<Category>(Category.reader).vTableGetNullable(_bc, _bcOffset, 10);
  List<Vibe>? get vibes => const fb.ListReader<Vibe>(Vibe.reader).vTableGetNullable(_bc, _bcOffset, 12);
  List<FlatEmbeddingBatch>? get productTextBatches => const fb.ListReader<FlatEmbeddingBatch>(FlatEmbeddingBatch.reader).vTableGetNullable(_bc, _bcOffset, 14);
  List<FlatEmbeddingBatch>? get productImageBatches => const fb.ListReader<FlatEmbeddingBatch>(FlatEmbeddingBatch.reader).vTableGetNullable(_bc, _bcOffset, 16);
  List<FlatEmbeddingBatch>? get textBatches => const fb.ListReader<FlatEmbeddingBatch>(FlatEmbeddingBatch.reader).vTableGetNullable(_bc, _bcOffset, 18);
  List<FlatEmbeddingBatch>? get imageBatches => const fb.ListReader<FlatEmbeddingBatch>(FlatEmbeddingBatch.reader).vTableGetNullable(_bc, _bcOffset, 20);

  @override
  String toString() {
    return 'ProductVibes{id: ${id}, products: ${products}, brands: ${brands}, categories: ${categories}, vibes: ${vibes}, productTextBatches: ${productTextBatches}, productImageBatches: ${productImageBatches}, textBatches: ${textBatches}, imageBatches: ${imageBatches}}';
  }

  ProductVibesT unpack() => ProductVibesT(
      id: id,
      products: products?.map((e) => e.unpack()).toList(),
      brands: brands?.map((e) => e.unpack()).toList(),
      categories: categories?.map((e) => e.unpack()).toList(),
      vibes: vibes?.map((e) => e.unpack()).toList(),
      productTextBatches: productTextBatches?.map((e) => e.unpack()).toList(),
      productImageBatches: productImageBatches?.map((e) => e.unpack()).toList(),
      textBatches: textBatches?.map((e) => e.unpack()).toList(),
      imageBatches: imageBatches?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, ProductVibesT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ProductVibesT implements fb.Packable {
  String? id;
  List<ProductT>? products;
  List<BrandT>? brands;
  List<CategoryT>? categories;
  List<VibeT>? vibes;
  List<FlatEmbeddingBatchT>? productTextBatches;
  List<FlatEmbeddingBatchT>? productImageBatches;
  List<FlatEmbeddingBatchT>? textBatches;
  List<FlatEmbeddingBatchT>? imageBatches;

  ProductVibesT({
      this.id,
      this.products,
      this.brands,
      this.categories,
      this.vibes,
      this.productTextBatches,
      this.productImageBatches,
      this.textBatches,
      this.imageBatches});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? idOffset = id == null ? null
        : fbBuilder.writeString(id!);
    final int? productsOffset = products == null ? null
        : fbBuilder.writeList(products!.map((b) => b.pack(fbBuilder)).toList());
    final int? brandsOffset = brands == null ? null
        : fbBuilder.writeList(brands!.map((b) => b.pack(fbBuilder)).toList());
    final int? categoriesOffset = categories == null ? null
        : fbBuilder.writeList(categories!.map((b) => b.pack(fbBuilder)).toList());
    final int? vibesOffset = vibes == null ? null
        : fbBuilder.writeList(vibes!.map((b) => b.pack(fbBuilder)).toList());
    final int? productTextBatchesOffset = productTextBatches == null ? null
        : fbBuilder.writeList(productTextBatches!.map((b) => b.pack(fbBuilder)).toList());
    final int? productImageBatchesOffset = productImageBatches == null ? null
        : fbBuilder.writeList(productImageBatches!.map((b) => b.pack(fbBuilder)).toList());
    final int? textBatchesOffset = textBatches == null ? null
        : fbBuilder.writeList(textBatches!.map((b) => b.pack(fbBuilder)).toList());
    final int? imageBatchesOffset = imageBatches == null ? null
        : fbBuilder.writeList(imageBatches!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(9);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, productsOffset);
    fbBuilder.addOffset(2, brandsOffset);
    fbBuilder.addOffset(3, categoriesOffset);
    fbBuilder.addOffset(4, vibesOffset);
    fbBuilder.addOffset(5, productTextBatchesOffset);
    fbBuilder.addOffset(6, productImageBatchesOffset);
    fbBuilder.addOffset(7, textBatchesOffset);
    fbBuilder.addOffset(8, imageBatchesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ProductVibesT{id: ${id}, products: ${products}, brands: ${brands}, categories: ${categories}, vibes: ${vibes}, productTextBatches: ${productTextBatches}, productImageBatches: ${productImageBatches}, textBatches: ${textBatches}, imageBatches: ${imageBatches}}';
  }
}

class _ProductVibesReader extends fb.TableReader<ProductVibes> {
  const _ProductVibesReader();

  @override
  ProductVibes createObject(fb.BufferContext bc, int offset) => 
    ProductVibes._(bc, offset);
}

class ProductVibesBuilder {
  ProductVibesBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(9);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addProductsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addBrandsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCategoriesOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addVibesOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addProductTextBatchesOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addProductImageBatchesOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addTextBatchesOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addImageBatchesOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ProductVibesObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final List<ProductObjectBuilder>? _products;
  final List<BrandObjectBuilder>? _brands;
  final List<CategoryObjectBuilder>? _categories;
  final List<VibeObjectBuilder>? _vibes;
  final List<FlatEmbeddingBatchObjectBuilder>? _productTextBatches;
  final List<FlatEmbeddingBatchObjectBuilder>? _productImageBatches;
  final List<FlatEmbeddingBatchObjectBuilder>? _textBatches;
  final List<FlatEmbeddingBatchObjectBuilder>? _imageBatches;

  ProductVibesObjectBuilder({
    String? id,
    List<ProductObjectBuilder>? products,
    List<BrandObjectBuilder>? brands,
    List<CategoryObjectBuilder>? categories,
    List<VibeObjectBuilder>? vibes,
    List<FlatEmbeddingBatchObjectBuilder>? productTextBatches,
    List<FlatEmbeddingBatchObjectBuilder>? productImageBatches,
    List<FlatEmbeddingBatchObjectBuilder>? textBatches,
    List<FlatEmbeddingBatchObjectBuilder>? imageBatches,
  })
      : _id = id,
        _products = products,
        _brands = brands,
        _categories = categories,
        _vibes = vibes,
        _productTextBatches = productTextBatches,
        _productImageBatches = productImageBatches,
        _textBatches = textBatches,
        _imageBatches = imageBatches;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? productsOffset = _products == null ? null
        : fbBuilder.writeList(_products!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? brandsOffset = _brands == null ? null
        : fbBuilder.writeList(_brands!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? categoriesOffset = _categories == null ? null
        : fbBuilder.writeList(_categories!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? vibesOffset = _vibes == null ? null
        : fbBuilder.writeList(_vibes!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? productTextBatchesOffset = _productTextBatches == null ? null
        : fbBuilder.writeList(_productTextBatches!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? productImageBatchesOffset = _productImageBatches == null ? null
        : fbBuilder.writeList(_productImageBatches!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? textBatchesOffset = _textBatches == null ? null
        : fbBuilder.writeList(_textBatches!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? imageBatchesOffset = _imageBatches == null ? null
        : fbBuilder.writeList(_imageBatches!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(9);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, productsOffset);
    fbBuilder.addOffset(2, brandsOffset);
    fbBuilder.addOffset(3, categoriesOffset);
    fbBuilder.addOffset(4, vibesOffset);
    fbBuilder.addOffset(5, productTextBatchesOffset);
    fbBuilder.addOffset(6, productImageBatchesOffset);
    fbBuilder.addOffset(7, textBatchesOffset);
    fbBuilder.addOffset(8, imageBatchesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Catalog {
  Catalog._(this._bc, this._bcOffset);
  factory Catalog(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Catalog> reader = _CatalogReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get version => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ProductVibes? get productVibes => ProductVibes.reader.vTableGetNullable(_bc, _bcOffset, 10);
  int get batchSize => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  String? get tokenizerNameOrPath => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get modelNameOrPath => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'Catalog{id: ${id}, version: ${version}, description: ${description}, productVibes: ${productVibes}, batchSize: ${batchSize}, tokenizerNameOrPath: ${tokenizerNameOrPath}, modelNameOrPath: ${modelNameOrPath}}';
  }

  CatalogT unpack() => CatalogT(
      id: id,
      version: version,
      description: description,
      productVibes: productVibes?.unpack(),
      batchSize: batchSize,
      tokenizerNameOrPath: tokenizerNameOrPath,
      modelNameOrPath: modelNameOrPath);

  static int pack(fb.Builder fbBuilder, CatalogT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class CatalogT implements fb.Packable {
  String? id;
  String? version;
  String? description;
  ProductVibesT? productVibes;
  int batchSize;
  String? tokenizerNameOrPath;
  String? modelNameOrPath;

  CatalogT({
      this.id,
      this.version,
      this.description,
      this.productVibes,
      this.batchSize = 0,
      this.tokenizerNameOrPath,
      this.modelNameOrPath});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? idOffset = id == null ? null
        : fbBuilder.writeString(id!);
    final int? versionOffset = version == null ? null
        : fbBuilder.writeString(version!);
    final int? descriptionOffset = description == null ? null
        : fbBuilder.writeString(description!);
    final int? productVibesOffset = productVibes?.pack(fbBuilder);
    final int? tokenizerNameOrPathOffset = tokenizerNameOrPath == null ? null
        : fbBuilder.writeString(tokenizerNameOrPath!);
    final int? modelNameOrPathOffset = modelNameOrPath == null ? null
        : fbBuilder.writeString(modelNameOrPath!);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, versionOffset);
    fbBuilder.addOffset(2, descriptionOffset);
    fbBuilder.addOffset(3, productVibesOffset);
    fbBuilder.addInt32(4, batchSize);
    fbBuilder.addOffset(5, tokenizerNameOrPathOffset);
    fbBuilder.addOffset(6, modelNameOrPathOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'CatalogT{id: ${id}, version: ${version}, description: ${description}, productVibes: ${productVibes}, batchSize: ${batchSize}, tokenizerNameOrPath: ${tokenizerNameOrPath}, modelNameOrPath: ${modelNameOrPath}}';
  }
}

class _CatalogReader extends fb.TableReader<Catalog> {
  const _CatalogReader();

  @override
  Catalog createObject(fb.BufferContext bc, int offset) => 
    Catalog._(bc, offset);
}

class CatalogBuilder {
  CatalogBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addVersionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addProductVibesOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addBatchSize(int? batchSize) {
    fbBuilder.addInt32(4, batchSize);
    return fbBuilder.offset;
  }
  int addTokenizerNameOrPathOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addModelNameOrPathOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CatalogObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _version;
  final String? _description;
  final ProductVibesObjectBuilder? _productVibes;
  final int? _batchSize;
  final String? _tokenizerNameOrPath;
  final String? _modelNameOrPath;

  CatalogObjectBuilder({
    String? id,
    String? version,
    String? description,
    ProductVibesObjectBuilder? productVibes,
    int? batchSize,
    String? tokenizerNameOrPath,
    String? modelNameOrPath,
  })
      : _id = id,
        _version = version,
        _description = description,
        _productVibes = productVibes,
        _batchSize = batchSize,
        _tokenizerNameOrPath = tokenizerNameOrPath,
        _modelNameOrPath = modelNameOrPath;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? versionOffset = _version == null ? null
        : fbBuilder.writeString(_version!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? productVibesOffset = _productVibes?.getOrCreateOffset(fbBuilder);
    final int? tokenizerNameOrPathOffset = _tokenizerNameOrPath == null ? null
        : fbBuilder.writeString(_tokenizerNameOrPath!);
    final int? modelNameOrPathOffset = _modelNameOrPath == null ? null
        : fbBuilder.writeString(_modelNameOrPath!);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, versionOffset);
    fbBuilder.addOffset(2, descriptionOffset);
    fbBuilder.addOffset(3, productVibesOffset);
    fbBuilder.addInt32(4, _batchSize);
    fbBuilder.addOffset(5, tokenizerNameOrPathOffset);
    fbBuilder.addOffset(6, modelNameOrPathOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
