# automatically generated by the FlatBuffers compiler, do not modify

# namespace: hcf

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from typing import Optional
np = import_numpy()

class TextVibe(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TextVibe()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTextVibe(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TextVibe
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TextVibe
    def Id(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TextVibe
    def Description(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TextVibe
    def Url(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TextVibe
    def ProductIdx(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # TextVibe
    def ProductIdxAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # TextVibe
    def ProductIdxLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TextVibe
    def ProductIdxIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def TextVibeStart(builder: flatbuffers.Builder):
    builder.StartObject(4)

def Start(builder: flatbuffers.Builder):
    TextVibeStart(builder)

def TextVibeAddId(builder: flatbuffers.Builder, id: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder: flatbuffers.Builder, id: int):
    TextVibeAddId(builder, id)

def TextVibeAddDescription(builder: flatbuffers.Builder, description: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder: flatbuffers.Builder, description: int):
    TextVibeAddDescription(builder, description)

def TextVibeAddUrl(builder: flatbuffers.Builder, url: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(url), 0)

def AddUrl(builder: flatbuffers.Builder, url: int):
    TextVibeAddUrl(builder, url)

def TextVibeAddProductIdx(builder: flatbuffers.Builder, productIdx: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(productIdx), 0)

def AddProductIdx(builder: flatbuffers.Builder, productIdx: int):
    TextVibeAddProductIdx(builder, productIdx)

def TextVibeStartProductIdxVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartProductIdxVector(builder, numElems: int) -> int:
    return TextVibeStartProductIdxVector(builder, numElems)

def TextVibeEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return TextVibeEnd(builder)

try:
    from typing import List
except:
    pass

class TextVibeT(object):

    # TextVibeT
    def __init__(self):
        self.id = None  # type: str
        self.description = None  # type: str
        self.url = None  # type: str
        self.productIdx = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        textVibe = TextVibe()
        textVibe.Init(buf, pos)
        return cls.InitFromObj(textVibe)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, textVibe):
        x = TextVibeT()
        x._UnPack(textVibe)
        return x

    # TextVibeT
    def _UnPack(self, textVibe):
        if textVibe is None:
            return
        self.id = textVibe.Id()
        self.description = textVibe.Description()
        self.url = textVibe.Url()
        if not textVibe.ProductIdxIsNone():
            if np is None:
                self.productIdx = []
                for i in range(textVibe.ProductIdxLength()):
                    self.productIdx.append(textVibe.ProductIdx(i))
            else:
                self.productIdx = textVibe.ProductIdxAsNumpy()

    # TextVibeT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.url is not None:
            url = builder.CreateString(self.url)
        if self.productIdx is not None:
            if np is not None and type(self.productIdx) is np.ndarray:
                productIdx = builder.CreateNumpyVector(self.productIdx)
            else:
                TextVibeStartProductIdxVector(builder, len(self.productIdx))
                for i in reversed(range(len(self.productIdx))):
                    builder.PrependInt32(self.productIdx[i])
                productIdx = builder.EndVector()
        TextVibeStart(builder)
        if self.id is not None:
            TextVibeAddId(builder, id)
        if self.description is not None:
            TextVibeAddDescription(builder, description)
        if self.url is not None:
            TextVibeAddUrl(builder, url)
        if self.productIdx is not None:
            TextVibeAddProductIdx(builder, productIdx)
        textVibe = TextVibeEnd(builder)
        return textVibe
