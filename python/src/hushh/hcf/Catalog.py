# automatically generated by the FlatBuffers compiler, do not modify

# namespace: hcf

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from hushh.hcf.CompositionMetadata import CompositionMetadata
from hushh.hcf.Embedding import Embedding
from hushh.hcf.Product import Product
from hushh.hcf.VibeMetadata import VibeMetadata
from typing import Optional
np = import_numpy()

class Catalog(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Catalog()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCatalog(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Catalog
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Catalog
    def Id(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Catalog
    def Version(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Catalog
    def Products(self, j: int) -> Optional[Product]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Product()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Catalog
    def ProductsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Catalog
    def ProductsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Catalog
    def VibeMetadata(self, j: int) -> Optional[VibeMetadata]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = VibeMetadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Catalog
    def VibeMetadataLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Catalog
    def VibeMetadataIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Catalog
    def VibeEmbeddings(self, j: int) -> Optional[Embedding]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Embedding()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Catalog
    def VibeEmbeddingsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Catalog
    def VibeEmbeddingsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Catalog
    def CompositionMetadata(self, j: int) -> Optional[CompositionMetadata]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = CompositionMetadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Catalog
    def CompositionMetadataLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Catalog
    def CompositionMetadataIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Catalog
    def CompositionEmbedding(self, j: int) -> Optional[Embedding]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Embedding()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Catalog
    def CompositionEmbeddingLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Catalog
    def CompositionEmbeddingIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def CatalogStart(builder: flatbuffers.Builder):
    builder.StartObject(7)

def Start(builder: flatbuffers.Builder):
    CatalogStart(builder)

def CatalogAddId(builder: flatbuffers.Builder, id: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder: flatbuffers.Builder, id: int):
    CatalogAddId(builder, id)

def CatalogAddVersion(builder: flatbuffers.Builder, version: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)

def AddVersion(builder: flatbuffers.Builder, version: int):
    CatalogAddVersion(builder, version)

def CatalogAddProducts(builder: flatbuffers.Builder, products: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(products), 0)

def AddProducts(builder: flatbuffers.Builder, products: int):
    CatalogAddProducts(builder, products)

def CatalogStartProductsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartProductsVector(builder, numElems: int) -> int:
    return CatalogStartProductsVector(builder, numElems)

def CatalogAddVibeMetadata(builder: flatbuffers.Builder, vibeMetadata: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(vibeMetadata), 0)

def AddVibeMetadata(builder: flatbuffers.Builder, vibeMetadata: int):
    CatalogAddVibeMetadata(builder, vibeMetadata)

def CatalogStartVibeMetadataVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartVibeMetadataVector(builder, numElems: int) -> int:
    return CatalogStartVibeMetadataVector(builder, numElems)

def CatalogAddVibeEmbeddings(builder: flatbuffers.Builder, vibeEmbeddings: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(vibeEmbeddings), 0)

def AddVibeEmbeddings(builder: flatbuffers.Builder, vibeEmbeddings: int):
    CatalogAddVibeEmbeddings(builder, vibeEmbeddings)

def CatalogStartVibeEmbeddingsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartVibeEmbeddingsVector(builder, numElems: int) -> int:
    return CatalogStartVibeEmbeddingsVector(builder, numElems)

def CatalogAddCompositionMetadata(builder: flatbuffers.Builder, compositionMetadata: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(compositionMetadata), 0)

def AddCompositionMetadata(builder: flatbuffers.Builder, compositionMetadata: int):
    CatalogAddCompositionMetadata(builder, compositionMetadata)

def CatalogStartCompositionMetadataVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartCompositionMetadataVector(builder, numElems: int) -> int:
    return CatalogStartCompositionMetadataVector(builder, numElems)

def CatalogAddCompositionEmbedding(builder: flatbuffers.Builder, compositionEmbedding: int):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(compositionEmbedding), 0)

def AddCompositionEmbedding(builder: flatbuffers.Builder, compositionEmbedding: int):
    CatalogAddCompositionEmbedding(builder, compositionEmbedding)

def CatalogStartCompositionEmbeddingVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartCompositionEmbeddingVector(builder, numElems: int) -> int:
    return CatalogStartCompositionEmbeddingVector(builder, numElems)

def CatalogEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return CatalogEnd(builder)

import hushh.hcf.CompositionMetadata
import hushh.hcf.Embedding
import hushh.hcf.Product
import hushh.hcf.VibeMetadata
try:
    from typing import List
except:
    pass

class CatalogT(object):

    # CatalogT
    def __init__(self):
        self.id = None  # type: str
        self.version = None  # type: str
        self.products = None  # type: List[hushh.hcf.Product.ProductT]
        self.vibeMetadata = None  # type: List[hushh.hcf.VibeMetadata.VibeMetadataT]
        self.vibeEmbeddings = None  # type: List[hushh.hcf.Embedding.EmbeddingT]
        self.compositionMetadata = None  # type: List[hushh.hcf.CompositionMetadata.CompositionMetadataT]
        self.compositionEmbedding = None  # type: List[hushh.hcf.Embedding.EmbeddingT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        catalog = Catalog()
        catalog.Init(buf, pos)
        return cls.InitFromObj(catalog)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, catalog):
        x = CatalogT()
        x._UnPack(catalog)
        return x

    # CatalogT
    def _UnPack(self, catalog):
        if catalog is None:
            return
        self.id = catalog.Id()
        self.version = catalog.Version()
        if not catalog.ProductsIsNone():
            self.products = []
            for i in range(catalog.ProductsLength()):
                if catalog.Products(i) is None:
                    self.products.append(None)
                else:
                    product_ = hushh.hcf.Product.ProductT.InitFromObj(catalog.Products(i))
                    self.products.append(product_)
        if not catalog.VibeMetadataIsNone():
            self.vibeMetadata = []
            for i in range(catalog.VibeMetadataLength()):
                if catalog.VibeMetadata(i) is None:
                    self.vibeMetadata.append(None)
                else:
                    vibeMetadata_ = hushh.hcf.VibeMetadata.VibeMetadataT.InitFromObj(catalog.VibeMetadata(i))
                    self.vibeMetadata.append(vibeMetadata_)
        if not catalog.VibeEmbeddingsIsNone():
            self.vibeEmbeddings = []
            for i in range(catalog.VibeEmbeddingsLength()):
                if catalog.VibeEmbeddings(i) is None:
                    self.vibeEmbeddings.append(None)
                else:
                    embedding_ = hushh.hcf.Embedding.EmbeddingT.InitFromObj(catalog.VibeEmbeddings(i))
                    self.vibeEmbeddings.append(embedding_)
        if not catalog.CompositionMetadataIsNone():
            self.compositionMetadata = []
            for i in range(catalog.CompositionMetadataLength()):
                if catalog.CompositionMetadata(i) is None:
                    self.compositionMetadata.append(None)
                else:
                    compositionMetadata_ = hushh.hcf.CompositionMetadata.CompositionMetadataT.InitFromObj(catalog.CompositionMetadata(i))
                    self.compositionMetadata.append(compositionMetadata_)
        if not catalog.CompositionEmbeddingIsNone():
            self.compositionEmbedding = []
            for i in range(catalog.CompositionEmbeddingLength()):
                if catalog.CompositionEmbedding(i) is None:
                    self.compositionEmbedding.append(None)
                else:
                    embedding_ = hushh.hcf.Embedding.EmbeddingT.InitFromObj(catalog.CompositionEmbedding(i))
                    self.compositionEmbedding.append(embedding_)

    # CatalogT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.version is not None:
            version = builder.CreateString(self.version)
        if self.products is not None:
            productslist = []
            for i in range(len(self.products)):
                productslist.append(self.products[i].Pack(builder))
            CatalogStartProductsVector(builder, len(self.products))
            for i in reversed(range(len(self.products))):
                builder.PrependUOffsetTRelative(productslist[i])
            products = builder.EndVector()
        if self.vibeMetadata is not None:
            vibeMetadatalist = []
            for i in range(len(self.vibeMetadata)):
                vibeMetadatalist.append(self.vibeMetadata[i].Pack(builder))
            CatalogStartVibeMetadataVector(builder, len(self.vibeMetadata))
            for i in reversed(range(len(self.vibeMetadata))):
                builder.PrependUOffsetTRelative(vibeMetadatalist[i])
            vibeMetadata = builder.EndVector()
        if self.vibeEmbeddings is not None:
            vibeEmbeddingslist = []
            for i in range(len(self.vibeEmbeddings)):
                vibeEmbeddingslist.append(self.vibeEmbeddings[i].Pack(builder))
            CatalogStartVibeEmbeddingsVector(builder, len(self.vibeEmbeddings))
            for i in reversed(range(len(self.vibeEmbeddings))):
                builder.PrependUOffsetTRelative(vibeEmbeddingslist[i])
            vibeEmbeddings = builder.EndVector()
        if self.compositionMetadata is not None:
            compositionMetadatalist = []
            for i in range(len(self.compositionMetadata)):
                compositionMetadatalist.append(self.compositionMetadata[i].Pack(builder))
            CatalogStartCompositionMetadataVector(builder, len(self.compositionMetadata))
            for i in reversed(range(len(self.compositionMetadata))):
                builder.PrependUOffsetTRelative(compositionMetadatalist[i])
            compositionMetadata = builder.EndVector()
        if self.compositionEmbedding is not None:
            compositionEmbeddinglist = []
            for i in range(len(self.compositionEmbedding)):
                compositionEmbeddinglist.append(self.compositionEmbedding[i].Pack(builder))
            CatalogStartCompositionEmbeddingVector(builder, len(self.compositionEmbedding))
            for i in reversed(range(len(self.compositionEmbedding))):
                builder.PrependUOffsetTRelative(compositionEmbeddinglist[i])
            compositionEmbedding = builder.EndVector()
        CatalogStart(builder)
        if self.id is not None:
            CatalogAddId(builder, id)
        if self.version is not None:
            CatalogAddVersion(builder, version)
        if self.products is not None:
            CatalogAddProducts(builder, products)
        if self.vibeMetadata is not None:
            CatalogAddVibeMetadata(builder, vibeMetadata)
        if self.vibeEmbeddings is not None:
            CatalogAddVibeEmbeddings(builder, vibeEmbeddings)
        if self.compositionMetadata is not None:
            CatalogAddCompositionMetadata(builder, compositionMetadata)
        if self.compositionEmbedding is not None:
            CatalogAddCompositionEmbedding(builder, compositionEmbedding)
        catalog = CatalogEnd(builder)
        return catalog
