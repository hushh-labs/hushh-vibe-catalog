# automatically generated by the FlatBuffers compiler, do not modify

# namespace: hcf

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from hushh.hcf.Category import Category
from hushh.hcf.FlatTensorBatch import FlatTensorBatch
from hushh.hcf.ImageVibe import ImageVibe
from hushh.hcf.Product import Product
from hushh.hcf.TextVibe import TextVibe
from typing import Optional
np = import_numpy()

class Catalog(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Catalog()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCatalog(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Catalog
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Catalog
    def Id(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Catalog
    def Version(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Catalog
    def Description(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Catalog
    def Products(self, j: int) -> Optional[Product]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Product()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Catalog
    def ProductsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Catalog
    def ProductsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Catalog
    def TextVibes(self, j: int) -> Optional[TextVibe]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = TextVibe()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Catalog
    def TextVibesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Catalog
    def TextVibesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Catalog
    def ImageVibes(self, j: int) -> Optional[ImageVibe]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = ImageVibe()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Catalog
    def ImageVibesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Catalog
    def ImageVibesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Catalog
    def Categories(self, j: int) -> Optional[Category]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Category()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Catalog
    def CategoriesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Catalog
    def CategoriesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Catalog
    def EmbeddingBatches(self, j: int) -> Optional[FlatTensorBatch]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = FlatTensorBatch()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Catalog
    def EmbeddingBatchesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Catalog
    def EmbeddingBatchesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def CatalogStart(builder: flatbuffers.Builder):
    builder.StartObject(8)

def Start(builder: flatbuffers.Builder):
    CatalogStart(builder)

def CatalogAddId(builder: flatbuffers.Builder, id: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder: flatbuffers.Builder, id: int):
    CatalogAddId(builder, id)

def CatalogAddVersion(builder: flatbuffers.Builder, version: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)

def AddVersion(builder: flatbuffers.Builder, version: int):
    CatalogAddVersion(builder, version)

def CatalogAddDescription(builder: flatbuffers.Builder, description: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder: flatbuffers.Builder, description: int):
    CatalogAddDescription(builder, description)

def CatalogAddProducts(builder: flatbuffers.Builder, products: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(products), 0)

def AddProducts(builder: flatbuffers.Builder, products: int):
    CatalogAddProducts(builder, products)

def CatalogStartProductsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartProductsVector(builder, numElems: int) -> int:
    return CatalogStartProductsVector(builder, numElems)

def CatalogAddTextVibes(builder: flatbuffers.Builder, textVibes: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(textVibes), 0)

def AddTextVibes(builder: flatbuffers.Builder, textVibes: int):
    CatalogAddTextVibes(builder, textVibes)

def CatalogStartTextVibesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartTextVibesVector(builder, numElems: int) -> int:
    return CatalogStartTextVibesVector(builder, numElems)

def CatalogAddImageVibes(builder: flatbuffers.Builder, imageVibes: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(imageVibes), 0)

def AddImageVibes(builder: flatbuffers.Builder, imageVibes: int):
    CatalogAddImageVibes(builder, imageVibes)

def CatalogStartImageVibesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartImageVibesVector(builder, numElems: int) -> int:
    return CatalogStartImageVibesVector(builder, numElems)

def CatalogAddCategories(builder: flatbuffers.Builder, categories: int):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(categories), 0)

def AddCategories(builder: flatbuffers.Builder, categories: int):
    CatalogAddCategories(builder, categories)

def CatalogStartCategoriesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartCategoriesVector(builder, numElems: int) -> int:
    return CatalogStartCategoriesVector(builder, numElems)

def CatalogAddEmbeddingBatches(builder: flatbuffers.Builder, embeddingBatches: int):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(embeddingBatches), 0)

def AddEmbeddingBatches(builder: flatbuffers.Builder, embeddingBatches: int):
    CatalogAddEmbeddingBatches(builder, embeddingBatches)

def CatalogStartEmbeddingBatchesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartEmbeddingBatchesVector(builder, numElems: int) -> int:
    return CatalogStartEmbeddingBatchesVector(builder, numElems)

def CatalogEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return CatalogEnd(builder)

import hushh.hcf.Category
import hushh.hcf.FlatTensorBatch
import hushh.hcf.ImageVibe
import hushh.hcf.Product
import hushh.hcf.TextVibe
try:
    from typing import List
except:
    pass

class CatalogT(object):

    # CatalogT
    def __init__(self):
        self.id = None  # type: str
        self.version = None  # type: str
        self.description = None  # type: str
        self.products = None  # type: List[hushh.hcf.Product.ProductT]
        self.textVibes = None  # type: List[hushh.hcf.TextVibe.TextVibeT]
        self.imageVibes = None  # type: List[hushh.hcf.ImageVibe.ImageVibeT]
        self.categories = None  # type: List[hushh.hcf.Category.CategoryT]
        self.embeddingBatches = None  # type: List[hushh.hcf.FlatTensorBatch.FlatTensorBatchT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        catalog = Catalog()
        catalog.Init(buf, pos)
        return cls.InitFromObj(catalog)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, catalog):
        x = CatalogT()
        x._UnPack(catalog)
        return x

    # CatalogT
    def _UnPack(self, catalog):
        if catalog is None:
            return
        self.id = catalog.Id()
        self.version = catalog.Version()
        self.description = catalog.Description()
        if not catalog.ProductsIsNone():
            self.products = []
            for i in range(catalog.ProductsLength()):
                if catalog.Products(i) is None:
                    self.products.append(None)
                else:
                    product_ = hushh.hcf.Product.ProductT.InitFromObj(catalog.Products(i))
                    self.products.append(product_)
        if not catalog.TextVibesIsNone():
            self.textVibes = []
            for i in range(catalog.TextVibesLength()):
                if catalog.TextVibes(i) is None:
                    self.textVibes.append(None)
                else:
                    textVibe_ = hushh.hcf.TextVibe.TextVibeT.InitFromObj(catalog.TextVibes(i))
                    self.textVibes.append(textVibe_)
        if not catalog.ImageVibesIsNone():
            self.imageVibes = []
            for i in range(catalog.ImageVibesLength()):
                if catalog.ImageVibes(i) is None:
                    self.imageVibes.append(None)
                else:
                    imageVibe_ = hushh.hcf.ImageVibe.ImageVibeT.InitFromObj(catalog.ImageVibes(i))
                    self.imageVibes.append(imageVibe_)
        if not catalog.CategoriesIsNone():
            self.categories = []
            for i in range(catalog.CategoriesLength()):
                if catalog.Categories(i) is None:
                    self.categories.append(None)
                else:
                    category_ = hushh.hcf.Category.CategoryT.InitFromObj(catalog.Categories(i))
                    self.categories.append(category_)
        if not catalog.EmbeddingBatchesIsNone():
            self.embeddingBatches = []
            for i in range(catalog.EmbeddingBatchesLength()):
                if catalog.EmbeddingBatches(i) is None:
                    self.embeddingBatches.append(None)
                else:
                    flatTensorBatch_ = hushh.hcf.FlatTensorBatch.FlatTensorBatchT.InitFromObj(catalog.EmbeddingBatches(i))
                    self.embeddingBatches.append(flatTensorBatch_)

    # CatalogT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.version is not None:
            version = builder.CreateString(self.version)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.products is not None:
            productslist = []
            for i in range(len(self.products)):
                productslist.append(self.products[i].Pack(builder))
            CatalogStartProductsVector(builder, len(self.products))
            for i in reversed(range(len(self.products))):
                builder.PrependUOffsetTRelative(productslist[i])
            products = builder.EndVector()
        if self.textVibes is not None:
            textVibeslist = []
            for i in range(len(self.textVibes)):
                textVibeslist.append(self.textVibes[i].Pack(builder))
            CatalogStartTextVibesVector(builder, len(self.textVibes))
            for i in reversed(range(len(self.textVibes))):
                builder.PrependUOffsetTRelative(textVibeslist[i])
            textVibes = builder.EndVector()
        if self.imageVibes is not None:
            imageVibeslist = []
            for i in range(len(self.imageVibes)):
                imageVibeslist.append(self.imageVibes[i].Pack(builder))
            CatalogStartImageVibesVector(builder, len(self.imageVibes))
            for i in reversed(range(len(self.imageVibes))):
                builder.PrependUOffsetTRelative(imageVibeslist[i])
            imageVibes = builder.EndVector()
        if self.categories is not None:
            categorieslist = []
            for i in range(len(self.categories)):
                categorieslist.append(self.categories[i].Pack(builder))
            CatalogStartCategoriesVector(builder, len(self.categories))
            for i in reversed(range(len(self.categories))):
                builder.PrependUOffsetTRelative(categorieslist[i])
            categories = builder.EndVector()
        if self.embeddingBatches is not None:
            embeddingBatcheslist = []
            for i in range(len(self.embeddingBatches)):
                embeddingBatcheslist.append(self.embeddingBatches[i].Pack(builder))
            CatalogStartEmbeddingBatchesVector(builder, len(self.embeddingBatches))
            for i in reversed(range(len(self.embeddingBatches))):
                builder.PrependUOffsetTRelative(embeddingBatcheslist[i])
            embeddingBatches = builder.EndVector()
        CatalogStart(builder)
        if self.id is not None:
            CatalogAddId(builder, id)
        if self.version is not None:
            CatalogAddVersion(builder, version)
        if self.description is not None:
            CatalogAddDescription(builder, description)
        if self.products is not None:
            CatalogAddProducts(builder, products)
        if self.textVibes is not None:
            CatalogAddTextVibes(builder, textVibes)
        if self.imageVibes is not None:
            CatalogAddImageVibes(builder, imageVibes)
        if self.categories is not None:
            CatalogAddCategories(builder, categories)
        if self.embeddingBatches is not None:
            CatalogAddEmbeddingBatches(builder, embeddingBatches)
        catalog = CatalogEnd(builder)
        return catalog
