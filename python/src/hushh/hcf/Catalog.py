# automatically generated by the FlatBuffers compiler, do not modify

# namespace: hcf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Catalog(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Catalog()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCatalog(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Catalog
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Catalog
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Catalog
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Catalog
    def Head(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Catalog
    def Products(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from hushh.hcf.Product import Product
            obj = Product()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Catalog
    def ProductsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Catalog
    def ProductsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Catalog
    def ProductEmbeddings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from hushh.hcf.Embedding import Embedding
            obj = Embedding()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Catalog
    def ProductEmbeddingsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Catalog
    def ProductEmbeddingsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Catalog
    def Characterizations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from hushh.hcf.ProductCharacterization import ProductCharacterization
            obj = ProductCharacterization()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Catalog
    def CharacterizationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Catalog
    def CharacterizationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Catalog
    def CharacterizationEmbeddings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from hushh.hcf.Embedding import Embedding
            obj = Embedding()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Catalog
    def CharacterizationEmbeddingsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Catalog
    def CharacterizationEmbeddingsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Catalog
    def ProductInformation(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from hushh.hcf.ProductInformation import ProductInformation
            obj = ProductInformation()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Catalog
    def ProductInformationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Catalog
    def ProductInformationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def CatalogStart(builder):
    builder.StartObject(8)

def Start(builder):
    CatalogStart(builder)

def CatalogAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    CatalogAddId(builder, id)

def CatalogAddVersion(builder, version):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)

def AddVersion(builder, version):
    CatalogAddVersion(builder, version)

def CatalogAddHead(builder, head):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(head), 0)

def AddHead(builder, head):
    CatalogAddHead(builder, head)

def CatalogAddProducts(builder, products):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(products), 0)

def AddProducts(builder, products):
    CatalogAddProducts(builder, products)

def CatalogStartProductsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartProductsVector(builder, numElems: int) -> int:
    return CatalogStartProductsVector(builder, numElems)

def CatalogAddProductEmbeddings(builder, productEmbeddings):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(productEmbeddings), 0)

def AddProductEmbeddings(builder, productEmbeddings):
    CatalogAddProductEmbeddings(builder, productEmbeddings)

def CatalogStartProductEmbeddingsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartProductEmbeddingsVector(builder, numElems: int) -> int:
    return CatalogStartProductEmbeddingsVector(builder, numElems)

def CatalogAddCharacterizations(builder, characterizations):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(characterizations), 0)

def AddCharacterizations(builder, characterizations):
    CatalogAddCharacterizations(builder, characterizations)

def CatalogStartCharacterizationsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCharacterizationsVector(builder, numElems: int) -> int:
    return CatalogStartCharacterizationsVector(builder, numElems)

def CatalogAddCharacterizationEmbeddings(builder, characterizationEmbeddings):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(characterizationEmbeddings), 0)

def AddCharacterizationEmbeddings(builder, characterizationEmbeddings):
    CatalogAddCharacterizationEmbeddings(builder, characterizationEmbeddings)

def CatalogStartCharacterizationEmbeddingsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCharacterizationEmbeddingsVector(builder, numElems: int) -> int:
    return CatalogStartCharacterizationEmbeddingsVector(builder, numElems)

def CatalogAddProductInformation(builder, productInformation):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(productInformation), 0)

def AddProductInformation(builder, productInformation):
    CatalogAddProductInformation(builder, productInformation)

def CatalogStartProductInformationVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartProductInformationVector(builder, numElems: int) -> int:
    return CatalogStartProductInformationVector(builder, numElems)

def CatalogEnd(builder):
    return builder.EndObject()

def End(builder):
    return CatalogEnd(builder)
