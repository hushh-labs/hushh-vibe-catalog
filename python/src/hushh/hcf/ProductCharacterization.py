# automatically generated by the FlatBuffers compiler, do not modify

# namespace: hcf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ProductCharacterization(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProductCharacterization()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsProductCharacterization(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ProductCharacterization
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ProductCharacterization
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ProductCharacterization
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ProductCharacterization
    def Url(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ProductCharacterization
    def ProductIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ProductCharacterization
    def ProductIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProductCharacterization
    def ProductIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def ProductCharacterizationStart(builder):
    builder.StartObject(4)

def Start(builder):
    ProductCharacterizationStart(builder)

def ProductCharacterizationAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    ProductCharacterizationAddId(builder, id)

def ProductCharacterizationAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    ProductCharacterizationAddDescription(builder, description)

def ProductCharacterizationAddUrl(builder, url):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(url), 0)

def AddUrl(builder, url):
    ProductCharacterizationAddUrl(builder, url)

def ProductCharacterizationAddProductIds(builder, productIds):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(productIds), 0)

def AddProductIds(builder, productIds):
    ProductCharacterizationAddProductIds(builder, productIds)

def ProductCharacterizationStartProductIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartProductIdsVector(builder, numElems: int) -> int:
    return ProductCharacterizationStartProductIdsVector(builder, numElems)

def ProductCharacterizationEnd(builder):
    return builder.EndObject()

def End(builder):
    return ProductCharacterizationEnd(builder)

try:
    from typing import List
except:
    pass

class ProductCharacterizationT(object):

    # ProductCharacterizationT
    def __init__(self):
        self.id = None  # type: str
        self.description = None  # type: str
        self.url = None  # type: str
        self.productIds = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        productCharacterization = ProductCharacterization()
        productCharacterization.Init(buf, pos)
        return cls.InitFromObj(productCharacterization)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, productCharacterization):
        x = ProductCharacterizationT()
        x._UnPack(productCharacterization)
        return x

    # ProductCharacterizationT
    def _UnPack(self, productCharacterization):
        if productCharacterization is None:
            return
        self.id = productCharacterization.Id()
        self.description = productCharacterization.Description()
        self.url = productCharacterization.Url()
        if not productCharacterization.ProductIdsIsNone():
            self.productIds = []
            for i in range(productCharacterization.ProductIdsLength()):
                self.productIds.append(productCharacterization.ProductIds(i))

    # ProductCharacterizationT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.url is not None:
            url = builder.CreateString(self.url)
        if self.productIds is not None:
            productIdslist = []
            for i in range(len(self.productIds)):
                productIdslist.append(builder.CreateString(self.productIds[i]))
            ProductCharacterizationStartProductIdsVector(builder, len(self.productIds))
            for i in reversed(range(len(self.productIds))):
                builder.PrependUOffsetTRelative(productIdslist[i])
            productIds = builder.EndVector()
        ProductCharacterizationStart(builder)
        if self.id is not None:
            ProductCharacterizationAddId(builder, id)
        if self.description is not None:
            ProductCharacterizationAddDescription(builder, description)
        if self.url is not None:
            ProductCharacterizationAddUrl(builder, url)
        if self.productIds is not None:
            ProductCharacterizationAddProductIds(builder, productIds)
        productCharacterization = ProductCharacterizationEnd(builder)
        return productCharacterization
