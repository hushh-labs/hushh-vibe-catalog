# automatically generated by the FlatBuffers compiler, do not modify

# namespace: hcf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Embedding(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Embedding()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEmbedding(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Embedding
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Embedding
    def V(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Embedding
    def VAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Embedding
    def VLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Embedding
    def VIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def EmbeddingStart(builder):
    builder.StartObject(1)

def Start(builder):
    EmbeddingStart(builder)

def EmbeddingAddV(builder, v):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(v), 0)

def AddV(builder, v):
    EmbeddingAddV(builder, v)

def EmbeddingStartVVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartVVector(builder, numElems: int) -> int:
    return EmbeddingStartVVector(builder, numElems)

def EmbeddingEnd(builder):
    return builder.EndObject()

def End(builder):
    return EmbeddingEnd(builder)
