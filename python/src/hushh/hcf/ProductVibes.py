# automatically generated by the FlatBuffers compiler, do not modify

# namespace: hcf

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from hushh.hcf.Category import Category
from hushh.hcf.FlatEmbeddingBatch import FlatEmbeddingBatch
from hushh.hcf.Product import Product
from hushh.hcf.Vibe import Vibe
from typing import Optional
np = import_numpy()

class ProductVibes(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProductVibes()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsProductVibes(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ProductVibes
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ProductVibes
    def Id(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ProductVibes
    def Products(self, j: int) -> Optional[Product]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Product()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ProductVibes
    def ProductsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProductVibes
    def ProductsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # ProductVibes
    def Categories(self, j: int) -> Optional[Category]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Category()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ProductVibes
    def CategoriesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProductVibes
    def CategoriesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # ProductVibes
    def Vibes(self, j: int) -> Optional[Vibe]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Vibe()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ProductVibes
    def VibesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProductVibes
    def VibesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # ProductVibes
    def ProductTextBatches(self, j: int) -> Optional[FlatEmbeddingBatch]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = FlatEmbeddingBatch()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ProductVibes
    def ProductTextBatchesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProductVibes
    def ProductTextBatchesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # ProductVibes
    def ProductImageBatches(self, j: int) -> Optional[FlatEmbeddingBatch]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = FlatEmbeddingBatch()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ProductVibes
    def ProductImageBatchesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProductVibes
    def ProductImageBatchesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # ProductVibes
    def TextBatches(self, j: int) -> Optional[FlatEmbeddingBatch]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = FlatEmbeddingBatch()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ProductVibes
    def TextBatchesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProductVibes
    def TextBatchesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # ProductVibes
    def ImageBatches(self, j: int) -> Optional[FlatEmbeddingBatch]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = FlatEmbeddingBatch()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ProductVibes
    def ImageBatchesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProductVibes
    def ImageBatchesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def ProductVibesStart(builder: flatbuffers.Builder):
    builder.StartObject(8)

def Start(builder: flatbuffers.Builder):
    ProductVibesStart(builder)

def ProductVibesAddId(builder: flatbuffers.Builder, id: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder: flatbuffers.Builder, id: int):
    ProductVibesAddId(builder, id)

def ProductVibesAddProducts(builder: flatbuffers.Builder, products: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(products), 0)

def AddProducts(builder: flatbuffers.Builder, products: int):
    ProductVibesAddProducts(builder, products)

def ProductVibesStartProductsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartProductsVector(builder, numElems: int) -> int:
    return ProductVibesStartProductsVector(builder, numElems)

def ProductVibesAddCategories(builder: flatbuffers.Builder, categories: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(categories), 0)

def AddCategories(builder: flatbuffers.Builder, categories: int):
    ProductVibesAddCategories(builder, categories)

def ProductVibesStartCategoriesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartCategoriesVector(builder, numElems: int) -> int:
    return ProductVibesStartCategoriesVector(builder, numElems)

def ProductVibesAddVibes(builder: flatbuffers.Builder, vibes: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(vibes), 0)

def AddVibes(builder: flatbuffers.Builder, vibes: int):
    ProductVibesAddVibes(builder, vibes)

def ProductVibesStartVibesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartVibesVector(builder, numElems: int) -> int:
    return ProductVibesStartVibesVector(builder, numElems)

def ProductVibesAddProductTextBatches(builder: flatbuffers.Builder, productTextBatches: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(productTextBatches), 0)

def AddProductTextBatches(builder: flatbuffers.Builder, productTextBatches: int):
    ProductVibesAddProductTextBatches(builder, productTextBatches)

def ProductVibesStartProductTextBatchesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartProductTextBatchesVector(builder, numElems: int) -> int:
    return ProductVibesStartProductTextBatchesVector(builder, numElems)

def ProductVibesAddProductImageBatches(builder: flatbuffers.Builder, productImageBatches: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(productImageBatches), 0)

def AddProductImageBatches(builder: flatbuffers.Builder, productImageBatches: int):
    ProductVibesAddProductImageBatches(builder, productImageBatches)

def ProductVibesStartProductImageBatchesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartProductImageBatchesVector(builder, numElems: int) -> int:
    return ProductVibesStartProductImageBatchesVector(builder, numElems)

def ProductVibesAddTextBatches(builder: flatbuffers.Builder, textBatches: int):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(textBatches), 0)

def AddTextBatches(builder: flatbuffers.Builder, textBatches: int):
    ProductVibesAddTextBatches(builder, textBatches)

def ProductVibesStartTextBatchesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartTextBatchesVector(builder, numElems: int) -> int:
    return ProductVibesStartTextBatchesVector(builder, numElems)

def ProductVibesAddImageBatches(builder: flatbuffers.Builder, imageBatches: int):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(imageBatches), 0)

def AddImageBatches(builder: flatbuffers.Builder, imageBatches: int):
    ProductVibesAddImageBatches(builder, imageBatches)

def ProductVibesStartImageBatchesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartImageBatchesVector(builder, numElems: int) -> int:
    return ProductVibesStartImageBatchesVector(builder, numElems)

def ProductVibesEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return ProductVibesEnd(builder)

import hushh.hcf.Category
import hushh.hcf.FlatEmbeddingBatch
import hushh.hcf.Product
import hushh.hcf.Vibe
try:
    from typing import List
except:
    pass

class ProductVibesT(object):

    # ProductVibesT
    def __init__(self):
        self.id = None  # type: str
        self.products = None  # type: List[hushh.hcf.Product.ProductT]
        self.categories = None  # type: List[hushh.hcf.Category.CategoryT]
        self.vibes = None  # type: List[hushh.hcf.Vibe.VibeT]
        self.productTextBatches = None  # type: List[hushh.hcf.FlatEmbeddingBatch.FlatEmbeddingBatchT]
        self.productImageBatches = None  # type: List[hushh.hcf.FlatEmbeddingBatch.FlatEmbeddingBatchT]
        self.textBatches = None  # type: List[hushh.hcf.FlatEmbeddingBatch.FlatEmbeddingBatchT]
        self.imageBatches = None  # type: List[hushh.hcf.FlatEmbeddingBatch.FlatEmbeddingBatchT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        productVibes = ProductVibes()
        productVibes.Init(buf, pos)
        return cls.InitFromObj(productVibes)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, productVibes):
        x = ProductVibesT()
        x._UnPack(productVibes)
        return x

    # ProductVibesT
    def _UnPack(self, productVibes):
        if productVibes is None:
            return
        self.id = productVibes.Id()
        if not productVibes.ProductsIsNone():
            self.products = []
            for i in range(productVibes.ProductsLength()):
                if productVibes.Products(i) is None:
                    self.products.append(None)
                else:
                    product_ = hushh.hcf.Product.ProductT.InitFromObj(productVibes.Products(i))
                    self.products.append(product_)
        if not productVibes.CategoriesIsNone():
            self.categories = []
            for i in range(productVibes.CategoriesLength()):
                if productVibes.Categories(i) is None:
                    self.categories.append(None)
                else:
                    category_ = hushh.hcf.Category.CategoryT.InitFromObj(productVibes.Categories(i))
                    self.categories.append(category_)
        if not productVibes.VibesIsNone():
            self.vibes = []
            for i in range(productVibes.VibesLength()):
                if productVibes.Vibes(i) is None:
                    self.vibes.append(None)
                else:
                    vibe_ = hushh.hcf.Vibe.VibeT.InitFromObj(productVibes.Vibes(i))
                    self.vibes.append(vibe_)
        if not productVibes.ProductTextBatchesIsNone():
            self.productTextBatches = []
            for i in range(productVibes.ProductTextBatchesLength()):
                if productVibes.ProductTextBatches(i) is None:
                    self.productTextBatches.append(None)
                else:
                    flatEmbeddingBatch_ = hushh.hcf.FlatEmbeddingBatch.FlatEmbeddingBatchT.InitFromObj(productVibes.ProductTextBatches(i))
                    self.productTextBatches.append(flatEmbeddingBatch_)
        if not productVibes.ProductImageBatchesIsNone():
            self.productImageBatches = []
            for i in range(productVibes.ProductImageBatchesLength()):
                if productVibes.ProductImageBatches(i) is None:
                    self.productImageBatches.append(None)
                else:
                    flatEmbeddingBatch_ = hushh.hcf.FlatEmbeddingBatch.FlatEmbeddingBatchT.InitFromObj(productVibes.ProductImageBatches(i))
                    self.productImageBatches.append(flatEmbeddingBatch_)
        if not productVibes.TextBatchesIsNone():
            self.textBatches = []
            for i in range(productVibes.TextBatchesLength()):
                if productVibes.TextBatches(i) is None:
                    self.textBatches.append(None)
                else:
                    flatEmbeddingBatch_ = hushh.hcf.FlatEmbeddingBatch.FlatEmbeddingBatchT.InitFromObj(productVibes.TextBatches(i))
                    self.textBatches.append(flatEmbeddingBatch_)
        if not productVibes.ImageBatchesIsNone():
            self.imageBatches = []
            for i in range(productVibes.ImageBatchesLength()):
                if productVibes.ImageBatches(i) is None:
                    self.imageBatches.append(None)
                else:
                    flatEmbeddingBatch_ = hushh.hcf.FlatEmbeddingBatch.FlatEmbeddingBatchT.InitFromObj(productVibes.ImageBatches(i))
                    self.imageBatches.append(flatEmbeddingBatch_)

    # ProductVibesT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.products is not None:
            productslist = []
            for i in range(len(self.products)):
                productslist.append(self.products[i].Pack(builder))
            ProductVibesStartProductsVector(builder, len(self.products))
            for i in reversed(range(len(self.products))):
                builder.PrependUOffsetTRelative(productslist[i])
            products = builder.EndVector()
        if self.categories is not None:
            categorieslist = []
            for i in range(len(self.categories)):
                categorieslist.append(self.categories[i].Pack(builder))
            ProductVibesStartCategoriesVector(builder, len(self.categories))
            for i in reversed(range(len(self.categories))):
                builder.PrependUOffsetTRelative(categorieslist[i])
            categories = builder.EndVector()
        if self.vibes is not None:
            vibeslist = []
            for i in range(len(self.vibes)):
                vibeslist.append(self.vibes[i].Pack(builder))
            ProductVibesStartVibesVector(builder, len(self.vibes))
            for i in reversed(range(len(self.vibes))):
                builder.PrependUOffsetTRelative(vibeslist[i])
            vibes = builder.EndVector()
        if self.productTextBatches is not None:
            productTextBatcheslist = []
            for i in range(len(self.productTextBatches)):
                productTextBatcheslist.append(self.productTextBatches[i].Pack(builder))
            ProductVibesStartProductTextBatchesVector(builder, len(self.productTextBatches))
            for i in reversed(range(len(self.productTextBatches))):
                builder.PrependUOffsetTRelative(productTextBatcheslist[i])
            productTextBatches = builder.EndVector()
        if self.productImageBatches is not None:
            productImageBatcheslist = []
            for i in range(len(self.productImageBatches)):
                productImageBatcheslist.append(self.productImageBatches[i].Pack(builder))
            ProductVibesStartProductImageBatchesVector(builder, len(self.productImageBatches))
            for i in reversed(range(len(self.productImageBatches))):
                builder.PrependUOffsetTRelative(productImageBatcheslist[i])
            productImageBatches = builder.EndVector()
        if self.textBatches is not None:
            textBatcheslist = []
            for i in range(len(self.textBatches)):
                textBatcheslist.append(self.textBatches[i].Pack(builder))
            ProductVibesStartTextBatchesVector(builder, len(self.textBatches))
            for i in reversed(range(len(self.textBatches))):
                builder.PrependUOffsetTRelative(textBatcheslist[i])
            textBatches = builder.EndVector()
        if self.imageBatches is not None:
            imageBatcheslist = []
            for i in range(len(self.imageBatches)):
                imageBatcheslist.append(self.imageBatches[i].Pack(builder))
            ProductVibesStartImageBatchesVector(builder, len(self.imageBatches))
            for i in reversed(range(len(self.imageBatches))):
                builder.PrependUOffsetTRelative(imageBatcheslist[i])
            imageBatches = builder.EndVector()
        ProductVibesStart(builder)
        if self.id is not None:
            ProductVibesAddId(builder, id)
        if self.products is not None:
            ProductVibesAddProducts(builder, products)
        if self.categories is not None:
            ProductVibesAddCategories(builder, categories)
        if self.vibes is not None:
            ProductVibesAddVibes(builder, vibes)
        if self.productTextBatches is not None:
            ProductVibesAddProductTextBatches(builder, productTextBatches)
        if self.productImageBatches is not None:
            ProductVibesAddProductImageBatches(builder, productImageBatches)
        if self.textBatches is not None:
            ProductVibesAddTextBatches(builder, textBatches)
        if self.imageBatches is not None:
            ProductVibesAddImageBatches(builder, imageBatches)
        productVibes = ProductVibesEnd(builder)
        return productVibes
