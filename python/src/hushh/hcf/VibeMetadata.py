# automatically generated by the FlatBuffers compiler, do not modify

# namespace: hcf

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from typing import Optional
np = import_numpy()

class VibeMetadata(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VibeMetadata()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVibeMetadata(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VibeMetadata
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VibeMetadata
    def Id(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # VibeMetadata
    def Description(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # VibeMetadata
    def ImageBase64(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # VibeMetadata
    def Url(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # VibeMetadata
    def CompositionIds(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # VibeMetadata
    def CompositionIdsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VibeMetadata
    def CompositionIdsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def VibeMetadataStart(builder: flatbuffers.Builder):
    builder.StartObject(5)

def Start(builder: flatbuffers.Builder):
    VibeMetadataStart(builder)

def VibeMetadataAddId(builder: flatbuffers.Builder, id: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder: flatbuffers.Builder, id: int):
    VibeMetadataAddId(builder, id)

def VibeMetadataAddDescription(builder: flatbuffers.Builder, description: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder: flatbuffers.Builder, description: int):
    VibeMetadataAddDescription(builder, description)

def VibeMetadataAddImageBase64(builder: flatbuffers.Builder, imageBase64: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(imageBase64), 0)

def AddImageBase64(builder: flatbuffers.Builder, imageBase64: int):
    VibeMetadataAddImageBase64(builder, imageBase64)

def VibeMetadataAddUrl(builder: flatbuffers.Builder, url: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(url), 0)

def AddUrl(builder: flatbuffers.Builder, url: int):
    VibeMetadataAddUrl(builder, url)

def VibeMetadataAddCompositionIds(builder: flatbuffers.Builder, compositionIds: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(compositionIds), 0)

def AddCompositionIds(builder: flatbuffers.Builder, compositionIds: int):
    VibeMetadataAddCompositionIds(builder, compositionIds)

def VibeMetadataStartCompositionIdsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartCompositionIdsVector(builder, numElems: int) -> int:
    return VibeMetadataStartCompositionIdsVector(builder, numElems)

def VibeMetadataEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return VibeMetadataEnd(builder)

try:
    from typing import List
except:
    pass

class VibeMetadataT(object):

    # VibeMetadataT
    def __init__(self):
        self.id = None  # type: str
        self.description = None  # type: str
        self.imageBase64 = None  # type: str
        self.url = None  # type: str
        self.compositionIds = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vibeMetadata = VibeMetadata()
        vibeMetadata.Init(buf, pos)
        return cls.InitFromObj(vibeMetadata)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vibeMetadata):
        x = VibeMetadataT()
        x._UnPack(vibeMetadata)
        return x

    # VibeMetadataT
    def _UnPack(self, vibeMetadata):
        if vibeMetadata is None:
            return
        self.id = vibeMetadata.Id()
        self.description = vibeMetadata.Description()
        self.imageBase64 = vibeMetadata.ImageBase64()
        self.url = vibeMetadata.Url()
        if not vibeMetadata.CompositionIdsIsNone():
            self.compositionIds = []
            for i in range(vibeMetadata.CompositionIdsLength()):
                self.compositionIds.append(vibeMetadata.CompositionIds(i))

    # VibeMetadataT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.imageBase64 is not None:
            imageBase64 = builder.CreateString(self.imageBase64)
        if self.url is not None:
            url = builder.CreateString(self.url)
        if self.compositionIds is not None:
            compositionIdslist = []
            for i in range(len(self.compositionIds)):
                compositionIdslist.append(builder.CreateString(self.compositionIds[i]))
            VibeMetadataStartCompositionIdsVector(builder, len(self.compositionIds))
            for i in reversed(range(len(self.compositionIds))):
                builder.PrependUOffsetTRelative(compositionIdslist[i])
            compositionIds = builder.EndVector()
        VibeMetadataStart(builder)
        if self.id is not None:
            VibeMetadataAddId(builder, id)
        if self.description is not None:
            VibeMetadataAddDescription(builder, description)
        if self.imageBase64 is not None:
            VibeMetadataAddImageBase64(builder, imageBase64)
        if self.url is not None:
            VibeMetadataAddUrl(builder, url)
        if self.compositionIds is not None:
            VibeMetadataAddCompositionIds(builder, compositionIds)
        vibeMetadata = VibeMetadataEnd(builder)
        return vibeMetadata
