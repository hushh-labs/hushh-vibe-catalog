# automatically generated by the FlatBuffers compiler, do not modify

# namespace: hcf

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from typing import Optional
np = import_numpy()

class Category(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Category()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCategory(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Category
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Category
    def Id(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Category
    def Description(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Category
    def Url(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Category
    def ProductIdx(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Category
    def ProductIdxAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Category
    def ProductIdxLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Category
    def ProductIdxIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def CategoryStart(builder: flatbuffers.Builder):
    builder.StartObject(4)

def Start(builder: flatbuffers.Builder):
    CategoryStart(builder)

def CategoryAddId(builder: flatbuffers.Builder, id: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder: flatbuffers.Builder, id: int):
    CategoryAddId(builder, id)

def CategoryAddDescription(builder: flatbuffers.Builder, description: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder: flatbuffers.Builder, description: int):
    CategoryAddDescription(builder, description)

def CategoryAddUrl(builder: flatbuffers.Builder, url: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(url), 0)

def AddUrl(builder: flatbuffers.Builder, url: int):
    CategoryAddUrl(builder, url)

def CategoryAddProductIdx(builder: flatbuffers.Builder, productIdx: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(productIdx), 0)

def AddProductIdx(builder: flatbuffers.Builder, productIdx: int):
    CategoryAddProductIdx(builder, productIdx)

def CategoryStartProductIdxVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartProductIdxVector(builder, numElems: int) -> int:
    return CategoryStartProductIdxVector(builder, numElems)

def CategoryEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return CategoryEnd(builder)

try:
    from typing import List
except:
    pass

class CategoryT(object):

    # CategoryT
    def __init__(self):
        self.id = None  # type: str
        self.description = None  # type: str
        self.url = None  # type: str
        self.productIdx = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        category = Category()
        category.Init(buf, pos)
        return cls.InitFromObj(category)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, category):
        x = CategoryT()
        x._UnPack(category)
        return x

    # CategoryT
    def _UnPack(self, category):
        if category is None:
            return
        self.id = category.Id()
        self.description = category.Description()
        self.url = category.Url()
        if not category.ProductIdxIsNone():
            if np is None:
                self.productIdx = []
                for i in range(category.ProductIdxLength()):
                    self.productIdx.append(category.ProductIdx(i))
            else:
                self.productIdx = category.ProductIdxAsNumpy()

    # CategoryT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.url is not None:
            url = builder.CreateString(self.url)
        if self.productIdx is not None:
            if np is not None and type(self.productIdx) is np.ndarray:
                productIdx = builder.CreateNumpyVector(self.productIdx)
            else:
                CategoryStartProductIdxVector(builder, len(self.productIdx))
                for i in reversed(range(len(self.productIdx))):
                    builder.PrependInt32(self.productIdx[i])
                productIdx = builder.EndVector()
        CategoryStart(builder)
        if self.id is not None:
            CategoryAddId(builder, id)
        if self.description is not None:
            CategoryAddDescription(builder, description)
        if self.url is not None:
            CategoryAddUrl(builder, url)
        if self.productIdx is not None:
            CategoryAddProductIdx(builder, productIdx)
        category = CategoryEnd(builder)
        return category
