# automatically generated by the FlatBuffers compiler, do not modify

# namespace: hcf

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from typing import Optional
np = import_numpy()

class CompositionMetadata(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CompositionMetadata()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCompositionMetadata(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CompositionMetadata
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CompositionMetadata
    def Id(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CompositionMetadata
    def Description(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CompositionMetadata
    def Url(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CompositionMetadata
    def ProductIds(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CompositionMetadata
    def ProductIdsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CompositionMetadata
    def ProductIdsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def CompositionMetadataStart(builder: flatbuffers.Builder):
    builder.StartObject(4)

def Start(builder: flatbuffers.Builder):
    CompositionMetadataStart(builder)

def CompositionMetadataAddId(builder: flatbuffers.Builder, id: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder: flatbuffers.Builder, id: int):
    CompositionMetadataAddId(builder, id)

def CompositionMetadataAddDescription(builder: flatbuffers.Builder, description: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder: flatbuffers.Builder, description: int):
    CompositionMetadataAddDescription(builder, description)

def CompositionMetadataAddUrl(builder: flatbuffers.Builder, url: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(url), 0)

def AddUrl(builder: flatbuffers.Builder, url: int):
    CompositionMetadataAddUrl(builder, url)

def CompositionMetadataAddProductIds(builder: flatbuffers.Builder, productIds: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(productIds), 0)

def AddProductIds(builder: flatbuffers.Builder, productIds: int):
    CompositionMetadataAddProductIds(builder, productIds)

def CompositionMetadataStartProductIdsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartProductIdsVector(builder, numElems: int) -> int:
    return CompositionMetadataStartProductIdsVector(builder, numElems)

def CompositionMetadataEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return CompositionMetadataEnd(builder)

try:
    from typing import List
except:
    pass

class CompositionMetadataT(object):

    # CompositionMetadataT
    def __init__(self):
        self.id = None  # type: str
        self.description = None  # type: str
        self.url = None  # type: str
        self.productIds = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        compositionMetadata = CompositionMetadata()
        compositionMetadata.Init(buf, pos)
        return cls.InitFromObj(compositionMetadata)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, compositionMetadata):
        x = CompositionMetadataT()
        x._UnPack(compositionMetadata)
        return x

    # CompositionMetadataT
    def _UnPack(self, compositionMetadata):
        if compositionMetadata is None:
            return
        self.id = compositionMetadata.Id()
        self.description = compositionMetadata.Description()
        self.url = compositionMetadata.Url()
        if not compositionMetadata.ProductIdsIsNone():
            self.productIds = []
            for i in range(compositionMetadata.ProductIdsLength()):
                self.productIds.append(compositionMetadata.ProductIds(i))

    # CompositionMetadataT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.url is not None:
            url = builder.CreateString(self.url)
        if self.productIds is not None:
            productIdslist = []
            for i in range(len(self.productIds)):
                productIdslist.append(builder.CreateString(self.productIds[i]))
            CompositionMetadataStartProductIdsVector(builder, len(self.productIds))
            for i in reversed(range(len(self.productIds))):
                builder.PrependUOffsetTRelative(productIdslist[i])
            productIds = builder.EndVector()
        CompositionMetadataStart(builder)
        if self.id is not None:
            CompositionMetadataAddId(builder, id)
        if self.description is not None:
            CompositionMetadataAddDescription(builder, description)
        if self.url is not None:
            CompositionMetadataAddUrl(builder, url)
        if self.productIds is not None:
            CompositionMetadataAddProductIds(builder, productIds)
        compositionMetadata = CompositionMetadataEnd(builder)
        return compositionMetadata
