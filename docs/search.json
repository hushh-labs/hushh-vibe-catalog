[
  {
    "objectID": "reference/hcf.Catalog.html",
    "href": "reference/hcf.Catalog.html",
    "title": "hcf.Catalog",
    "section": "",
    "text": "hcf.Catalog\nhcf.Catalog"
  },
  {
    "objectID": "reference/hcf.html",
    "href": "reference/hcf.html",
    "title": "hcf",
    "section": "",
    "text": "hcf\nhcf"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Catalog functions\n\n\n\ncatalog.Catalog\n\n\n\nhcf\n\n\n\nhcf.Catalog\n\n\n\nhcf.Product\n\n\n\nhcf.Category"
  },
  {
    "objectID": "reference/index.html#catalog",
    "href": "reference/index.html#catalog",
    "title": "Function reference",
    "section": "",
    "text": "Catalog functions\n\n\n\ncatalog.Catalog\n\n\n\nhcf\n\n\n\nhcf.Catalog\n\n\n\nhcf.Product\n\n\n\nhcf.Category"
  },
  {
    "objectID": "reference/hcf.ImageVibe.html",
    "href": "reference/hcf.ImageVibe.html",
    "title": "hcf.ImageVibe",
    "section": "",
    "text": "hcf.ImageVibe\nhcf.ImageVibe"
  },
  {
    "objectID": "notebooks/Create Catalog.html",
    "href": "notebooks/Create Catalog.html",
    "title": "Create a Hushh Vibe Catalog",
    "section": "",
    "text": "Download an example product catalog from this Kaggle dataset.\nimport glob\nfrom hushh import catalog\nfrom hushh.catalog import Catalog, Product, Brand\nfrom PIL import Image\nimport json\nfrom tqdm import tqdm\nimport pandas as pd\nimport msgpack\nimport os\nimport timeit"
  },
  {
    "objectID": "notebooks/Create Catalog.html#download-data",
    "href": "notebooks/Create Catalog.html#download-data",
    "title": "Create a Hushh Vibe Catalog",
    "section": "Download Data",
    "text": "Download Data\nUncomment and execute the next two cells to download/unzip the image dataset\n\n# !kaggle datasets download paramaggarwal/fashion-product-images-small --force \n\n\n# ! unzip -o fashion-product-images-small.zip &gt; /dev/null"
  },
  {
    "objectID": "notebooks/Create Catalog.html#data-details",
    "href": "notebooks/Create Catalog.html#data-details",
    "title": "Create a Hushh Vibe Catalog",
    "section": "Data Details",
    "text": "Data Details\nThe dataset contains around ~40K fashion related images\n\nlen(glob.glob(\"images/*\"))\n\n44441\n\n\nTaking a quick look at the images, they’re jpeg files, with an id as a file name.\n\nprint(glob.glob(\"images/*\")[:10])\n\n['images/9733.jpg', 'images/14147.jpg', 'images/52112.jpg', 'images/6400.jpg', 'images/34297.jpg', 'images/24084.jpg', 'images/12536.jpg', 'images/54563.jpg', 'images/15259.jpg', 'images/35189.jpg']\n\n\nThe “styles” csv file gives some of the metadata for a given id.\n\nstyles = pd.read_csv(\"styles.csv\",usecols=range(10), index_col=0)\nstyles.head()\n\n\n\n\n\n\n\n\n\ngender\nmasterCategory\nsubCategory\narticleType\nbaseColour\nseason\nyear\nusage\nproductDisplayName\n\n\nid\n\n\n\n\n\n\n\n\n\n\n\n\n\n15970\nMen\nApparel\nTopwear\nShirts\nNavy Blue\nFall\n2011.0\nCasual\nTurtle Check Men Navy Blue Shirt\n\n\n39386\nMen\nApparel\nBottomwear\nJeans\nBlue\nSummer\n2012.0\nCasual\nPeter England Men Party Blue Jeans\n\n\n59263\nWomen\nAccessories\nWatches\nWatches\nSilver\nWinter\n2016.0\nCasual\nTitan Women Silver Watch\n\n\n21379\nMen\nApparel\nBottomwear\nTrack Pants\nBlack\nFall\n2011.0\nCasual\nManchester United Men Solid Black Track Pants\n\n\n53759\nMen\nApparel\nTopwear\nTshirts\nGrey\nSummer\n2012.0\nCasual\nPuma Men Grey T-shirt"
  },
  {
    "objectID": "notebooks/Create Catalog.html#creating-a-hushh-catalog",
    "href": "notebooks/Create Catalog.html#creating-a-hushh-catalog",
    "title": "Create a Hushh Vibe Catalog",
    "section": "Creating a Hushh Catalog",
    "text": "Creating a Hushh Catalog\nWe can create a catalog using the hushh catalog api. We follow these steps for each image file:\n\nExtract the id from the filename.\nLookup the metadata for the id.\nCreate a product for the id and metadata (using a dummy url, since we won’t be linking to a product url).\n\nThe Catalog comes with its own method for writing catalog files.\n\n\ncat = Catalog(\"demo_catalog\")\ndummy_brand = Brand(\"dummy\", \"description\", \"dummy_url\")\nfor filename in tqdm(glob.glob(\"images/*\")):\n    id, ext = os.path.splitext(os.path.basename(filename))\n    id = int(id)\n    style = styles.loc[id]\n    if pd.isna(style.productDisplayName):\n        pass\n        # print(f\"Skipping: {id}, product had no description\")\n    else:\n        prod = Product(description=style.productDisplayName, url=\"dummy_url\", image=filename, brand = dummy_brand)\n        cat.addProduct(prod)\n\nprint(\"Writing Catalog\")\ncat.to_hcf(\"catalog.hcf\")\n\n100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 44441/44441 [00:14&lt;00:00, 3134.00it/s]\n\n\nWriting Catalog\nCollected images and text for batch 0\nCollected inputs for batch 0\nCollected Image and text features for batch 0\nImage embeddings collected for batch 0\nText embeddings collected for batch 0\nCollected images and text for batch 1\nCollected inputs for batch 1\nCollected Image and text features for batch 1\nImage embeddings collected for batch 1\nText embeddings collected for batch 1\nCollected images and text for batch 2\nCollected inputs for batch 2\nCollected Image and text features for batch 2\nImage embeddings collected for batch 2\nText embeddings collected for batch 2\nCollected images and text for batch 3\nCollected inputs for batch 3\nCollected Image and text features for batch 3\nImage embeddings collected for batch 3\nText embeddings collected for batch 3\nCollected images and text for batch 4\nCollected inputs for batch 4\nCollected Image and text features for batch 4\nImage embeddings collected for batch 4\nText embeddings collected for batch 4"
  },
  {
    "objectID": "notebooks/Create Catalog.html#create-a-comparison-json-dataset",
    "href": "notebooks/Create Catalog.html#create-a-comparison-json-dataset",
    "title": "Create a Hushh Vibe Catalog",
    "section": "Create a comparison JSON dataset",
    "text": "Create a comparison JSON dataset\nWe will set up a quick and dirty json output for comparison. This just dumps the flatbatch content from the catalog in standard json format.\n\nwith open (\"catalog.json\", \"w\") as fh:\n    json.dump(cat.productVibes, fh, default=lambda o: o.__dict__)"
  },
  {
    "objectID": "notebooks/KNN Search.html",
    "href": "notebooks/KNN Search.html",
    "title": "",
    "section": "",
    "text": "from hushh import catalog\nfrom hushh.hcf.VibeMode import VibeMode\nimport numpy as np\nfrom sentence_transformers import util\nfrom transformers import CLIPModel, CLIPTokenizer\n\n\ntokenizer = CLIPTokenizer.from_pretrained(\"openai/clip-vit-base-patch32\")\nmodel = CLIPModel.from_pretrained(\"openai/clip-vit-base-patch32\")\n\n\n\n\ndef perform_search(query):\n    cat = catalog.read_hcf(\"catalog.hcf\")\n    pv = cat.ProductVibes()\n    all_embeddings = []\n    \n    embeddings = []\n\n    for idx in range(0,pv.ProductTextBatchesLength()):\n        batch = pv.ProductTextBatches(idx)\n        embs = batch.FlatTensorAsNumpy()\n        embs = embs.reshape(batch.ShapeAsNumpy())\n        embeddings.append(embs)\n\n    embeddings = np.concatenate(embeddings)\n\n        \n    query = \"shoes\"\n    \n    inputs = tokenizer([query], padding=True, return_tensors=\"pt\")\n    query_emb = model.get_text_features(**inputs)\n    hits = util.semantic_search(query_emb, embeddings, top_k=3)[0]\n    return cat.ProductVibes().Products(hits[0]['corpus_id']).Description()\n\n\nperform_search(\"shoes\")\n\nb'Enroute Men Black Shoes'\n\n\n\n%timeit -n 3 perform_search(\"shoes\")\n\n58.4 ms ± 6.66 ms per loop (mean ± std. dev. of 7 runs, 3 loops each)"
  },
  {
    "objectID": "reference/catalog.Catalog.html",
    "href": "reference/catalog.Catalog.html",
    "title": "catalog.Catalog",
    "section": "",
    "text": "catalog.Catalog\ncatalog.Catalog(self, description, batchSize=10000, model=None, processor=None, tokenizer=None)"
  },
  {
    "objectID": "reference/hcf.Category.html",
    "href": "reference/hcf.Category.html",
    "title": "hcf.Category",
    "section": "",
    "text": "hcf.Category\nhcf.Category"
  },
  {
    "objectID": "reference/hcf.Product.html",
    "href": "reference/hcf.Product.html",
    "title": "hcf.Product",
    "section": "",
    "text": "hcf.Product\nhcf.Product"
  }
]